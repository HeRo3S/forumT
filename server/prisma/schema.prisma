generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @unique @default(autoincrement())
  username         String            @unique
  displayname      String?
  email            String            @unique
  password         String            @db.MediumText
  userType         UserType          @default(USER)
  description      String?           @db.MediumText
  createdAt        DateTime          @default(now())
  deletedAt        DateTime?
  avatarURL        String?           @db.MediumText
  refreshToken     String            @db.Text
  commentReations  CommentReation[]
  reportedComments CommentReport[]
  comments         Comment[]
  groupsOwned      Group[]
  postReactions    PostReaction[]
  reportedPosts    PostReport[]
  posts            Post[]
  groupsFollowed   UserFollowGroup[]

  @@index([username, email])
  @@map("users")
}

model Group {
  id               Int               @id @unique @default(autoincrement())
  groupname        String            @unique
  displayname      String?
  ownername        String
  description      String?           @db.MediumText
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  avatarURL        String?           @db.MediumText
  owner            User              @relation(fields: [ownername], references: [username])
  posts            Post[]
  usersFollowGroup UserFollowGroup[]

  @@index([groupname, displayname])
  @@index([ownername], map: "groups_ownername_fkey")
  @@map("groups")
}

model Post {
  id          Int            @id @unique @default(autoincrement())
  title       String         @db.VarChar(200)
  content     String         @db.LongText
  groupname   String
  username    String
  type        PostType       @default(DEFAULT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  attachments Attachment[]
  comments    Comment[]
  reations    PostReaction[]
  reports     PostReport[]
  group       Group          @relation(fields: [groupname], references: [groupname])
  user        User           @relation(fields: [username], references: [username])

  @@index([title, groupname, username])
  @@index([groupname], map: "posts_groupname_fkey")
  @@index([username], map: "posts_username_fkey")
  @@map("posts")
}

model Comment {
  id           Int              @id @unique @default(autoincrement())
  content      String           @db.LongText
  parentPostID Int
  username     String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?
  reations     CommentReation[]
  reports      CommentReport[]
  parentPost   Post             @relation(fields: [parentPostID], references: [id])
  User         User             @relation(fields: [username], references: [username])

  @@index([parentPostID, username])
  @@index([username], map: "comments_username_fkey")
  @@map("comments")
}

model Attachment {
  id        Int            @id @unique @default(autoincrement())
  url       String         @db.MediumText
  postID    Int
  type      AttachmentType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  post      Post           @relation(fields: [postID], references: [id])

  @@index([postID])
  @@map("attachments")
}

model UserFollowGroup {
  username     String
  groupname    String
  role         UserInGroupType @default(USER)
  timeUnbanned DateTime        @default(now())
  group        Group           @relation(fields: [groupname], references: [groupname])
  follower     User            @relation(fields: [username], references: [username])

  @@unique([username, groupname])
  @@index([username, groupname, role])
  @@index([groupname], map: "user_follow_groups_groupname_fkey")
  @@map("user_follow_groups")
}

model PostReaction {
  id         Int          @id @unique @default(autoincrement())
  username   String
  postID     Int
  reaction   ReactionType @default(NONE)
  parentPost Post         @relation(fields: [postID], references: [id])
  user       User         @relation(fields: [username], references: [username])

  @@index([username, postID])
  @@index([postID], map: "post_reactions_postID_fkey")
  @@map("post_reactions")
}

model CommentReation {
  id            Int          @id @unique @default(autoincrement())
  username      String
  commentID     Int
  reaction      ReactionType @default(NONE)
  parentComment Comment      @relation(fields: [commentID], references: [id])
  user          User         @relation(fields: [username], references: [username])

  @@index([username, commentID])
  @@index([commentID], map: "comment_reactions_commentID_fkey")
  @@map("comment_reactions")
}

model PostReport {
  id           Int          @id @unique @default(autoincrement())
  username     String
  postID       Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       ReportStatus @default(UNHANDLED)
  bannedReason String       @db.VarChar(500)
  reportedPost Post?        @relation(fields: [postID], references: [id])
  reporter     User         @relation(fields: [username], references: [username])

  @@index([status, postID, bannedReason])
  @@index([postID], map: "post_reports_postID_fkey")
  @@index([username], map: "post_reports_username_fkey")
  @@map("post_reports")
}

model CommentReport {
  id              Int          @id @unique @default(autoincrement())
  username        String
  commentID       Int?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  status          ReportStatus @default(UNHANDLED)
  bannedReason    String       @db.VarChar(500)
  reportedComment Comment?     @relation(fields: [commentID], references: [id])
  reporter        User         @relation(fields: [username], references: [username])

  @@index([status, commentID, bannedReason])
  @@index([commentID], map: "comment_reports_commentID_fkey")
  @@index([username], map: "comment_reports_username_fkey")
  @@map("comment_reports")
}

enum UserType {
  SUPERADMIN
  USER
}

enum UserInGroupType {
  SUPERADMIN
  MODERATOR
  USER
  SOFTBANNED
  BANNED
}

enum PostType {
  DEFAULT
  MEDIA
  ATTACHMENT
  POLL
}

enum ReactionType {
  DOWNVOTE
  NONE
  UPVOTE
}

enum AttachmentType {
  PNG
  JPEG
  MP4
  DOCX
}

enum ReportStatus {
  APPROVE
  UNHANDLED
  BAN
}
